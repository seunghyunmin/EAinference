% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/EAlasso.R
\name{MHLSswp}
\alias{MHLSswp}
\title{This function provides Metropolis-Hastings sampler.}
\usage{
MHLSswp(X, coeff, sigma2, weights, lbd, nIter = 2000, burnin = 500, B0,
  S0 = NULL, tau, indexweights = NULL, selectsize = 0, FlipSA = NULL,
  skipS = FALSE, IndexSF, ...)
}
\arguments{
\item{X}{n x p matrix of predictors.}

\item{coeff}{n x 1 vector of estimates of true coefficient.}

\item{sigma2}{variance of error term.}

\item{weights}{Weight term for each coefficient. Default is rep(1, p).}

\item{lbd}{penalty term of lasso. See the loss function given at details.}

\item{burnin}{The length of burin-in periods. Default value is 500.}

\item{B0}{Initial value of coefficients of length p. Make sure to set values to zero for inactive set and non-zero for active set.}

\item{S0}{Initial value of subgradients. Has to satisfy certain conditions for subgradients. If not given, it will be generated in defauly way}

\item{tau}{p x 1 vector. Variance parameter for proposal distribution of coefficients.}

\item{indexweights}{p x 1 vector. Weights for updating active/inactive Index.}

\item{selectsize}{non-negatie integer that is less than or equal to p. This many number of active/inactive index will be flipped.}

\item{FlipSA}{Has to be a subset of active set, A. Unless active indices are not listed in FlipSA, the sign of coefficients will be fixed.}

\item{skipS}{Boolean value. Whether to skip the update of subgradients.}

\item{IndexSF}{Index}

\item{group}{p x 1 vector of consecutive integers. The number of groups should be same as max(group).}

\item{niter}{The number of iterations. Default value is 2000.}
}
\value{
\describe{
  \item{beta}{coefficient matrix of size N x p.}
  \item{subgrad}{subgradient matrix of size N x p.}
 }
}
\description{
This function provides Metropolis-Hastings sampler.
}
\details{
If futype="normal", it generate
}
\examples{
n <- 10
p <- 30
lbd <-  .5
niter <-  10
group <- rep(1:(p/10), each=10)
Weights <- rep(1,p/10)
x <- matrix(rnorm(n*p), n)
DirectSampler(X = x, coeff = rep(0,p), sigma2=1, lbd=.5, weights=Weights, group=group,N=niter, parallel=FALSE)
DirectSampler(X = x, coeff = rep(0,p), sigma2=1, lbd=.5, weights=Weights, group=group,N=niter, parallel=TRUE)
}
