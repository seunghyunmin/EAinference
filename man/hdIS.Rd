% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ImportanceSampler.R
\name{hdIS}
\alias{hdIS}
\title{Computing importance weights under high-dimensional setting}
\usage{
hdIS(DirectSample, pETarget, sig2Target, lbdTarget, TsA.method = "default",
  log = TRUE, parallel = FALSE, ncores = 2L)
}
\arguments{
\item{DirectSample}{Bootstrap samples of class \code{DS} from \code{DirectSampler}}

\item{pETarget, sig2Target, lbdTarget}{Parameter of target distribution.
(point estimate of beta or mu, estimated variance of error, lambda)}

\item{TsA.method}{Way to construct T(eta(s),A) matrix. See Zhou and Min(2016)
for more detail.}

\item{log}{If true, importance weight is computed in log scale.}

\item{parallel}{logical. If true, parallelize the computation.}

\item{ncores}{number of CPU cores to use for parallelization.}
}
\value{
\code{hdIS} returns importance weights of the proposed sample.
}
\description{
\code{hdIS} is used to computes importance weights using samples
drawn by \code{\link{DirectSampler}}. For group lasso, we provide the option
to use mixture distribution as a proposal distribution. See the examples
below for more details
}
\details{
Computes importance weights which is defined as \deqn{\frac{target
 density}{proposal density}}, when the samples is drawn from proposal
 distribution with (coeffprop, sig2prop, lbdprop) while the parameter of
 target distribution is (pETarget, sig2Target, lbdTarget).
}
\examples{
set.seed(1234)
n <- 10
p <- 30
Niter <-  10
Group <- rep(1:(p/10), each = 10)
Weights <- rep(1, p/10)
x <- matrix(rnorm(n*p), n)

# Target distribution parameter
pETarget <- rep(0, p)
sig2Target <- .5
lbdTarget <- .37

#
# Using non-mixture distribution
# ------------------------------
## Proposal distribution parameter
pEProp1 <- rep(1, p)
sig2Prop1 <- .5
lbdProp1 <- 1
DS <- DirectSampler(X = x, pointEstimate_1 = pEProp1, sig2_1 = sig2Prop1,
 lbd_1 = lbdProp1, weights = Weights, group = Group, niter = Niter,
 type = "coeff")

hdIS(DS, pETarget = pETarget, sig2Target = sig2Target, lbdTarget = lbdTarget,
 log = TRUE)

#
# Using mixture distribution
# ------------------------------
# Target distribution parameters (coeff, sig2, lbd) = (rep(0,p), .5, .37)
# Proposal distribution parameters
#  (coeff, sig2, lbd) = (rep(0,p), .5, .37) & (rep(1,p), 1, .5)
#
#
pEProp1 <- rep(0,p); pEProp2 <- rep(1,p)
sig2Prop1 <- .5; sig2Prop2 <- 1
lbdProp1 <- .37; lbdProp2 <- .5

DSMixture <- DirectSampler(X = x, pointEstimate_1 = pEProp1,
 sig2_1 = sig2Prop1, lbd_1 = lbdProp1, pointEstimate_2 = pEProp2,
 sig2_2 = sig2Prop2, lbd_2 = lbdProp2, weights = Weights, group = Group,
 niter = Niter, type = "coeff")
hdIS(DSMixture, pETarget = pETarget, sig2Target = sig2Target, lbdTarget = lbdTarget,
 log = TRUE)
}
